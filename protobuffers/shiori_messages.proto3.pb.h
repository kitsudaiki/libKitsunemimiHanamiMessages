// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shiori_messages.proto3

#ifndef GOOGLE_PROTOBUF_INCLUDED_shiori_5fmessages_2eproto3
#define GOOGLE_PROTOBUF_INCLUDED_shiori_5fmessages_2eproto3

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shiori_5fmessages_2eproto3
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shiori_5fmessages_2eproto3 {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shiori_5fmessages_2eproto3;
class FileUpload_Message;
class FileUpload_MessageDefaultTypeInternal;
extern FileUpload_MessageDefaultTypeInternal _FileUpload_Message_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FileUpload_Message* Arena::CreateMaybeMessage<::FileUpload_Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum UploadDataType : int {
  DATASET_TYPE = 0,
  CLUSTER_SNAPSHOT_TYPE = 1,
  UploadDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UploadDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UploadDataType_IsValid(int value);
constexpr UploadDataType UploadDataType_MIN = DATASET_TYPE;
constexpr UploadDataType UploadDataType_MAX = CLUSTER_SNAPSHOT_TYPE;
constexpr int UploadDataType_ARRAYSIZE = UploadDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UploadDataType_descriptor();
template<typename T>
inline const std::string& UploadDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UploadDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UploadDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UploadDataType_descriptor(), enum_t_value);
}
inline bool UploadDataType_Parse(
    const std::string& name, UploadDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UploadDataType>(
    UploadDataType_descriptor(), name, value);
}
// ===================================================================

class FileUpload_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileUpload_Message) */ {
 public:
  inline FileUpload_Message() : FileUpload_Message(nullptr) {};
  virtual ~FileUpload_Message();

  FileUpload_Message(const FileUpload_Message& from);
  FileUpload_Message(FileUpload_Message&& from) noexcept
    : FileUpload_Message() {
    *this = ::std::move(from);
  }

  inline FileUpload_Message& operator=(const FileUpload_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUpload_Message& operator=(FileUpload_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileUpload_Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileUpload_Message* internal_default_instance() {
    return reinterpret_cast<const FileUpload_Message*>(
               &_FileUpload_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileUpload_Message& a, FileUpload_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUpload_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUpload_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileUpload_Message* New() const final {
    return CreateMaybeMessage<FileUpload_Message>(nullptr);
  }

  FileUpload_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileUpload_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileUpload_Message& from);
  void MergeFrom(const FileUpload_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUpload_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileUpload_Message";
  }
  protected:
  explicit FileUpload_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shiori_5fmessages_2eproto3);
    return ::descriptor_table_shiori_5fmessages_2eproto3.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetUuidFieldNumber = 1,
    kFileUuidFieldNumber = 2,
    kDataFieldNumber = 6,
    kIsLastFieldNumber = 3,
    kTypeFieldNumber = 4,
    kPositionFieldNumber = 5,
  };
  // string datasetUuid = 1;
  void clear_datasetuuid();
  const std::string& datasetuuid() const;
  void set_datasetuuid(const std::string& value);
  void set_datasetuuid(std::string&& value);
  void set_datasetuuid(const char* value);
  void set_datasetuuid(const char* value, size_t size);
  std::string* mutable_datasetuuid();
  std::string* release_datasetuuid();
  void set_allocated_datasetuuid(std::string* datasetuuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datasetuuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datasetuuid(
      std::string* datasetuuid);
  private:
  const std::string& _internal_datasetuuid() const;
  void _internal_set_datasetuuid(const std::string& value);
  std::string* _internal_mutable_datasetuuid();
  public:

  // string fileUuid = 2;
  void clear_fileuuid();
  const std::string& fileuuid() const;
  void set_fileuuid(const std::string& value);
  void set_fileuuid(std::string&& value);
  void set_fileuuid(const char* value);
  void set_fileuuid(const char* value, size_t size);
  std::string* mutable_fileuuid();
  std::string* release_fileuuid();
  void set_allocated_fileuuid(std::string* fileuuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fileuuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fileuuid(
      std::string* fileuuid);
  private:
  const std::string& _internal_fileuuid() const;
  void _internal_set_fileuuid(const std::string& value);
  std::string* _internal_mutable_fileuuid();
  public:

  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bool isLast = 3;
  void clear_islast();
  bool islast() const;
  void set_islast(bool value);
  private:
  bool _internal_islast() const;
  void _internal_set_islast(bool value);
  public:

  // .UploadDataType type = 4;
  void clear_type();
  ::UploadDataType type() const;
  void set_type(::UploadDataType value);
  private:
  ::UploadDataType _internal_type() const;
  void _internal_set_type(::UploadDataType value);
  public:

  // uint64 position = 5;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:FileUpload_Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasetuuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fileuuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  bool islast_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shiori_5fmessages_2eproto3;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileUpload_Message

// string datasetUuid = 1;
inline void FileUpload_Message::clear_datasetuuid() {
  datasetuuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileUpload_Message::datasetuuid() const {
  // @@protoc_insertion_point(field_get:FileUpload_Message.datasetUuid)
  return _internal_datasetuuid();
}
inline void FileUpload_Message::set_datasetuuid(const std::string& value) {
  _internal_set_datasetuuid(value);
  // @@protoc_insertion_point(field_set:FileUpload_Message.datasetUuid)
}
inline std::string* FileUpload_Message::mutable_datasetuuid() {
  // @@protoc_insertion_point(field_mutable:FileUpload_Message.datasetUuid)
  return _internal_mutable_datasetuuid();
}
inline const std::string& FileUpload_Message::_internal_datasetuuid() const {
  return datasetuuid_.Get();
}
inline void FileUpload_Message::_internal_set_datasetuuid(const std::string& value) {
  
  datasetuuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileUpload_Message::set_datasetuuid(std::string&& value) {
  
  datasetuuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FileUpload_Message.datasetUuid)
}
inline void FileUpload_Message::set_datasetuuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datasetuuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FileUpload_Message.datasetUuid)
}
inline void FileUpload_Message::set_datasetuuid(const char* value,
    size_t size) {
  
  datasetuuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FileUpload_Message.datasetUuid)
}
inline std::string* FileUpload_Message::_internal_mutable_datasetuuid() {
  
  return datasetuuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileUpload_Message::release_datasetuuid() {
  // @@protoc_insertion_point(field_release:FileUpload_Message.datasetUuid)
  return datasetuuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileUpload_Message::set_allocated_datasetuuid(std::string* datasetuuid) {
  if (datasetuuid != nullptr) {
    
  } else {
    
  }
  datasetuuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasetuuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FileUpload_Message.datasetUuid)
}
inline std::string* FileUpload_Message::unsafe_arena_release_datasetuuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FileUpload_Message.datasetUuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return datasetuuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileUpload_Message::unsafe_arena_set_allocated_datasetuuid(
    std::string* datasetuuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datasetuuid != nullptr) {
    
  } else {
    
  }
  datasetuuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datasetuuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FileUpload_Message.datasetUuid)
}

// string fileUuid = 2;
inline void FileUpload_Message::clear_fileuuid() {
  fileuuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileUpload_Message::fileuuid() const {
  // @@protoc_insertion_point(field_get:FileUpload_Message.fileUuid)
  return _internal_fileuuid();
}
inline void FileUpload_Message::set_fileuuid(const std::string& value) {
  _internal_set_fileuuid(value);
  // @@protoc_insertion_point(field_set:FileUpload_Message.fileUuid)
}
inline std::string* FileUpload_Message::mutable_fileuuid() {
  // @@protoc_insertion_point(field_mutable:FileUpload_Message.fileUuid)
  return _internal_mutable_fileuuid();
}
inline const std::string& FileUpload_Message::_internal_fileuuid() const {
  return fileuuid_.Get();
}
inline void FileUpload_Message::_internal_set_fileuuid(const std::string& value) {
  
  fileuuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileUpload_Message::set_fileuuid(std::string&& value) {
  
  fileuuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FileUpload_Message.fileUuid)
}
inline void FileUpload_Message::set_fileuuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fileuuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FileUpload_Message.fileUuid)
}
inline void FileUpload_Message::set_fileuuid(const char* value,
    size_t size) {
  
  fileuuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FileUpload_Message.fileUuid)
}
inline std::string* FileUpload_Message::_internal_mutable_fileuuid() {
  
  return fileuuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileUpload_Message::release_fileuuid() {
  // @@protoc_insertion_point(field_release:FileUpload_Message.fileUuid)
  return fileuuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileUpload_Message::set_allocated_fileuuid(std::string* fileuuid) {
  if (fileuuid != nullptr) {
    
  } else {
    
  }
  fileuuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fileuuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FileUpload_Message.fileUuid)
}
inline std::string* FileUpload_Message::unsafe_arena_release_fileuuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FileUpload_Message.fileUuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fileuuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileUpload_Message::unsafe_arena_set_allocated_fileuuid(
    std::string* fileuuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fileuuid != nullptr) {
    
  } else {
    
  }
  fileuuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fileuuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FileUpload_Message.fileUuid)
}

// bool isLast = 3;
inline void FileUpload_Message::clear_islast() {
  islast_ = false;
}
inline bool FileUpload_Message::_internal_islast() const {
  return islast_;
}
inline bool FileUpload_Message::islast() const {
  // @@protoc_insertion_point(field_get:FileUpload_Message.isLast)
  return _internal_islast();
}
inline void FileUpload_Message::_internal_set_islast(bool value) {
  
  islast_ = value;
}
inline void FileUpload_Message::set_islast(bool value) {
  _internal_set_islast(value);
  // @@protoc_insertion_point(field_set:FileUpload_Message.isLast)
}

// .UploadDataType type = 4;
inline void FileUpload_Message::clear_type() {
  type_ = 0;
}
inline ::UploadDataType FileUpload_Message::_internal_type() const {
  return static_cast< ::UploadDataType >(type_);
}
inline ::UploadDataType FileUpload_Message::type() const {
  // @@protoc_insertion_point(field_get:FileUpload_Message.type)
  return _internal_type();
}
inline void FileUpload_Message::_internal_set_type(::UploadDataType value) {
  
  type_ = value;
}
inline void FileUpload_Message::set_type(::UploadDataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:FileUpload_Message.type)
}

// uint64 position = 5;
inline void FileUpload_Message::clear_position() {
  position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileUpload_Message::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileUpload_Message::position() const {
  // @@protoc_insertion_point(field_get:FileUpload_Message.position)
  return _internal_position();
}
inline void FileUpload_Message::_internal_set_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  position_ = value;
}
inline void FileUpload_Message::set_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:FileUpload_Message.position)
}

// bytes data = 6;
inline void FileUpload_Message::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileUpload_Message::data() const {
  // @@protoc_insertion_point(field_get:FileUpload_Message.data)
  return _internal_data();
}
inline void FileUpload_Message::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:FileUpload_Message.data)
}
inline std::string* FileUpload_Message::mutable_data() {
  // @@protoc_insertion_point(field_mutable:FileUpload_Message.data)
  return _internal_mutable_data();
}
inline const std::string& FileUpload_Message::_internal_data() const {
  return data_.Get();
}
inline void FileUpload_Message::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileUpload_Message::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FileUpload_Message.data)
}
inline void FileUpload_Message::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FileUpload_Message.data)
}
inline void FileUpload_Message::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FileUpload_Message.data)
}
inline std::string* FileUpload_Message::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileUpload_Message::release_data() {
  // @@protoc_insertion_point(field_release:FileUpload_Message.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileUpload_Message::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FileUpload_Message.data)
}
inline std::string* FileUpload_Message::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FileUpload_Message.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileUpload_Message::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FileUpload_Message.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::UploadDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UploadDataType>() {
  return ::UploadDataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shiori_5fmessages_2eproto3
