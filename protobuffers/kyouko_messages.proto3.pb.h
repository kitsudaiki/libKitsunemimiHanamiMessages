// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyouko_messages.proto3

#ifndef GOOGLE_PROTOBUF_INCLUDED_kyouko_5fmessages_2eproto3
#define GOOGLE_PROTOBUF_INCLUDED_kyouko_5fmessages_2eproto3

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kyouko_5fmessages_2eproto3
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kyouko_5fmessages_2eproto3 {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kyouko_5fmessages_2eproto3;
class ClusterIO_Message;
class ClusterIO_MessageDefaultTypeInternal;
extern ClusterIO_MessageDefaultTypeInternal _ClusterIO_Message_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClusterIO_Message* Arena::CreateMaybeMessage<::ClusterIO_Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ClusterProcessType : int {
  REQUEST_TYPE = 0,
  LEARN_TYPE = 1,
  ClusterProcessType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClusterProcessType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClusterProcessType_IsValid(int value);
constexpr ClusterProcessType ClusterProcessType_MIN = REQUEST_TYPE;
constexpr ClusterProcessType ClusterProcessType_MAX = LEARN_TYPE;
constexpr int ClusterProcessType_ARRAYSIZE = ClusterProcessType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClusterProcessType_descriptor();
template<typename T>
inline const std::string& ClusterProcessType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClusterProcessType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClusterProcessType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClusterProcessType_descriptor(), enum_t_value);
}
inline bool ClusterProcessType_Parse(
    const std::string& name, ClusterProcessType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClusterProcessType>(
    ClusterProcessType_descriptor(), name, value);
}
enum ClusterDataType : int {
  INPUT_TYPE = 0,
  SHOULD_TYPE = 1,
  OUTPUT_TYPE = 2,
  ClusterDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClusterDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClusterDataType_IsValid(int value);
constexpr ClusterDataType ClusterDataType_MIN = INPUT_TYPE;
constexpr ClusterDataType ClusterDataType_MAX = OUTPUT_TYPE;
constexpr int ClusterDataType_ARRAYSIZE = ClusterDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClusterDataType_descriptor();
template<typename T>
inline const std::string& ClusterDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClusterDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClusterDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClusterDataType_descriptor(), enum_t_value);
}
inline bool ClusterDataType_Parse(
    const std::string& name, ClusterDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClusterDataType>(
    ClusterDataType_descriptor(), name, value);
}
// ===================================================================

class ClusterIO_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClusterIO_Message) */ {
 public:
  inline ClusterIO_Message() : ClusterIO_Message(nullptr) {};
  virtual ~ClusterIO_Message();

  ClusterIO_Message(const ClusterIO_Message& from);
  ClusterIO_Message(ClusterIO_Message&& from) noexcept
    : ClusterIO_Message() {
    *this = ::std::move(from);
  }

  inline ClusterIO_Message& operator=(const ClusterIO_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterIO_Message& operator=(ClusterIO_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClusterIO_Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterIO_Message* internal_default_instance() {
    return reinterpret_cast<const ClusterIO_Message*>(
               &_ClusterIO_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClusterIO_Message& a, ClusterIO_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterIO_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClusterIO_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClusterIO_Message* New() const final {
    return CreateMaybeMessage<ClusterIO_Message>(nullptr);
  }

  ClusterIO_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClusterIO_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClusterIO_Message& from);
  void MergeFrom(const ClusterIO_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterIO_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClusterIO_Message";
  }
  protected:
  explicit ClusterIO_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kyouko_5fmessages_2eproto3);
    return ::descriptor_table_kyouko_5fmessages_2eproto3.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 6,
    kSegmentNameFieldNumber = 1,
    kIsLastFieldNumber = 2,
    kProcessTypeFieldNumber = 3,
    kNumberOfValuesFieldNumber = 5,
    kDataTypeFieldNumber = 4,
  };
  // repeated float values = 6 [packed = true];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // string segmentName = 1;
  void clear_segmentname();
  const std::string& segmentname() const;
  void set_segmentname(const std::string& value);
  void set_segmentname(std::string&& value);
  void set_segmentname(const char* value);
  void set_segmentname(const char* value, size_t size);
  std::string* mutable_segmentname();
  std::string* release_segmentname();
  void set_allocated_segmentname(std::string* segmentname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_segmentname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_segmentname(
      std::string* segmentname);
  private:
  const std::string& _internal_segmentname() const;
  void _internal_set_segmentname(const std::string& value);
  std::string* _internal_mutable_segmentname();
  public:

  // bool isLast = 2;
  void clear_islast();
  bool islast() const;
  void set_islast(bool value);
  private:
  bool _internal_islast() const;
  void _internal_set_islast(bool value);
  public:

  // .ClusterProcessType processType = 3;
  void clear_processtype();
  ::ClusterProcessType processtype() const;
  void set_processtype(::ClusterProcessType value);
  private:
  ::ClusterProcessType _internal_processtype() const;
  void _internal_set_processtype(::ClusterProcessType value);
  public:

  // uint64 numberOfValues = 5;
  void clear_numberofvalues();
  ::PROTOBUF_NAMESPACE_ID::uint64 numberofvalues() const;
  void set_numberofvalues(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_numberofvalues() const;
  void _internal_set_numberofvalues(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .ClusterDataType dataType = 4;
  void clear_datatype();
  ::ClusterDataType datatype() const;
  void set_datatype(::ClusterDataType value);
  private:
  ::ClusterDataType _internal_datatype() const;
  void _internal_set_datatype(::ClusterDataType value);
  public:

  // @@protoc_insertion_point(class_scope:ClusterIO_Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr segmentname_;
  bool islast_;
  int processtype_;
  ::PROTOBUF_NAMESPACE_ID::uint64 numberofvalues_;
  int datatype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kyouko_5fmessages_2eproto3;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClusterIO_Message

// string segmentName = 1;
inline void ClusterIO_Message::clear_segmentname() {
  segmentname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClusterIO_Message::segmentname() const {
  // @@protoc_insertion_point(field_get:ClusterIO_Message.segmentName)
  return _internal_segmentname();
}
inline void ClusterIO_Message::set_segmentname(const std::string& value) {
  _internal_set_segmentname(value);
  // @@protoc_insertion_point(field_set:ClusterIO_Message.segmentName)
}
inline std::string* ClusterIO_Message::mutable_segmentname() {
  // @@protoc_insertion_point(field_mutable:ClusterIO_Message.segmentName)
  return _internal_mutable_segmentname();
}
inline const std::string& ClusterIO_Message::_internal_segmentname() const {
  return segmentname_.Get();
}
inline void ClusterIO_Message::_internal_set_segmentname(const std::string& value) {
  
  segmentname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClusterIO_Message::set_segmentname(std::string&& value) {
  
  segmentname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClusterIO_Message.segmentName)
}
inline void ClusterIO_Message::set_segmentname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  segmentname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ClusterIO_Message.segmentName)
}
inline void ClusterIO_Message::set_segmentname(const char* value,
    size_t size) {
  
  segmentname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClusterIO_Message.segmentName)
}
inline std::string* ClusterIO_Message::_internal_mutable_segmentname() {
  
  return segmentname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClusterIO_Message::release_segmentname() {
  // @@protoc_insertion_point(field_release:ClusterIO_Message.segmentName)
  return segmentname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClusterIO_Message::set_allocated_segmentname(std::string* segmentname) {
  if (segmentname != nullptr) {
    
  } else {
    
  }
  segmentname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), segmentname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClusterIO_Message.segmentName)
}
inline std::string* ClusterIO_Message::unsafe_arena_release_segmentname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ClusterIO_Message.segmentName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return segmentname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClusterIO_Message::unsafe_arena_set_allocated_segmentname(
    std::string* segmentname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (segmentname != nullptr) {
    
  } else {
    
  }
  segmentname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      segmentname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClusterIO_Message.segmentName)
}

// bool isLast = 2;
inline void ClusterIO_Message::clear_islast() {
  islast_ = false;
}
inline bool ClusterIO_Message::_internal_islast() const {
  return islast_;
}
inline bool ClusterIO_Message::islast() const {
  // @@protoc_insertion_point(field_get:ClusterIO_Message.isLast)
  return _internal_islast();
}
inline void ClusterIO_Message::_internal_set_islast(bool value) {
  
  islast_ = value;
}
inline void ClusterIO_Message::set_islast(bool value) {
  _internal_set_islast(value);
  // @@protoc_insertion_point(field_set:ClusterIO_Message.isLast)
}

// .ClusterProcessType processType = 3;
inline void ClusterIO_Message::clear_processtype() {
  processtype_ = 0;
}
inline ::ClusterProcessType ClusterIO_Message::_internal_processtype() const {
  return static_cast< ::ClusterProcessType >(processtype_);
}
inline ::ClusterProcessType ClusterIO_Message::processtype() const {
  // @@protoc_insertion_point(field_get:ClusterIO_Message.processType)
  return _internal_processtype();
}
inline void ClusterIO_Message::_internal_set_processtype(::ClusterProcessType value) {
  
  processtype_ = value;
}
inline void ClusterIO_Message::set_processtype(::ClusterProcessType value) {
  _internal_set_processtype(value);
  // @@protoc_insertion_point(field_set:ClusterIO_Message.processType)
}

// .ClusterDataType dataType = 4;
inline void ClusterIO_Message::clear_datatype() {
  datatype_ = 0;
}
inline ::ClusterDataType ClusterIO_Message::_internal_datatype() const {
  return static_cast< ::ClusterDataType >(datatype_);
}
inline ::ClusterDataType ClusterIO_Message::datatype() const {
  // @@protoc_insertion_point(field_get:ClusterIO_Message.dataType)
  return _internal_datatype();
}
inline void ClusterIO_Message::_internal_set_datatype(::ClusterDataType value) {
  
  datatype_ = value;
}
inline void ClusterIO_Message::set_datatype(::ClusterDataType value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:ClusterIO_Message.dataType)
}

// uint64 numberOfValues = 5;
inline void ClusterIO_Message::clear_numberofvalues() {
  numberofvalues_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClusterIO_Message::_internal_numberofvalues() const {
  return numberofvalues_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClusterIO_Message::numberofvalues() const {
  // @@protoc_insertion_point(field_get:ClusterIO_Message.numberOfValues)
  return _internal_numberofvalues();
}
inline void ClusterIO_Message::_internal_set_numberofvalues(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  numberofvalues_ = value;
}
inline void ClusterIO_Message::set_numberofvalues(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_numberofvalues(value);
  // @@protoc_insertion_point(field_set:ClusterIO_Message.numberOfValues)
}

// repeated float values = 6 [packed = true];
inline int ClusterIO_Message::_internal_values_size() const {
  return values_.size();
}
inline int ClusterIO_Message::values_size() const {
  return _internal_values_size();
}
inline void ClusterIO_Message::clear_values() {
  values_.Clear();
}
inline float ClusterIO_Message::_internal_values(int index) const {
  return values_.Get(index);
}
inline float ClusterIO_Message::values(int index) const {
  // @@protoc_insertion_point(field_get:ClusterIO_Message.values)
  return _internal_values(index);
}
inline void ClusterIO_Message::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:ClusterIO_Message.values)
}
inline void ClusterIO_Message::_internal_add_values(float value) {
  values_.Add(value);
}
inline void ClusterIO_Message::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:ClusterIO_Message.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ClusterIO_Message::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ClusterIO_Message::values() const {
  // @@protoc_insertion_point(field_list:ClusterIO_Message.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ClusterIO_Message::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ClusterIO_Message::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:ClusterIO_Message.values)
  return _internal_mutable_values();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ClusterProcessType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClusterProcessType>() {
  return ::ClusterProcessType_descriptor();
}
template <> struct is_proto_enum< ::ClusterDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClusterDataType>() {
  return ::ClusterDataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kyouko_5fmessages_2eproto3
